猪猪侠
易百教程
所有教程
Java技术
数据库
极客文章
+投稿

  Spring教程
Spring初学快速入门
安装Spring工具套件到Eclipse
Spring快速入门
Spring hello world实例
Spring松耦合实例
Spring JDBC支持
Spring+JDBC实例
Spring JdbcTemplate+JdbcDaoSupport实例
Spring JdbcTemplate查询实例
Spring JdbcTemplate batchUpdate() 实例
Spring SimpleJdbcTemplate查询示例
Spring SimpleJdbcTemplate batchUpdate()实例
Spring SimpleJdbcTemplate类命名参数实例
Spring+JDBC实例
Spring自动装配Bean
Spring自动装配Beans
Spring由类型(Type)自动装配
Spring由名称(Name)自动装配
Spring由构造方法自动装配
Spring通过自动检测自动装配
Spring使用@Autowired注解自动装配
Spring自动装配@Qualifier实例
Spring JavaConfig
Spring JavaConfig实例
Spring JavaConfig @Import实例
Spring 依赖注入(DI)
Spring依赖注入（DI）
Spring使用Setter依赖注入
Spring通过构造方法依赖注入
Spring构造方法注入类型歧义
Spring Bean基础
Spring Bean引用例子
如何注入值到Spring bean属性
Spring bean加载多个配置文件
Spring内部bean实例
Spring Bean作用域实例
Spring集合 (List,Set,Map,Properties) 实例
Spring ListFactoryBean实例
Spring SetFactoryBean实例
Spring MapFactoryBean例子
Spring注入日期到bean属性-CustomDateEditor
Spring PropertyPlaceholderConfigurer实例
Spring bean配置继承
Spring依赖检查
Spring使用@Required注解依赖检查
Spring自定义@Required-style注解
Spring Bean InitializingBean和DisposableBean实例
Spring Bean init-method 和 destroy-method实例
Spring @PostConstruct和@PreDestroy实例
Spring表达式语言
Spring EL hello world实例
Spring EL bean引用实例
Spring EL方法调用实例
Spring EL运算符实例
Spring EL三元运算(if-then-else)实例
Spring EL Lists,Maps实例
Spring EL正则表达式实例
测试 Spring EL与ExpressionParser
Spring自动组件扫描
Spring自动扫描组件
Spring过滤器组件自动扫描
Spring AOP (面向方面编程)
Spring AOP通知实例 – Advice
Spring AOP实例(Pointcut,Advisor)
Spring AOP拦截器的序列
Spring自动代理创建者实例
Spring AOP + AspectJ框架
Spring AOP+AspectJ注解实例
Spring AOP+AspectJ在XML配置实例
Spring Hibernate支持
Spring+Hibernate+MySql实例
Spring+Hibernate+MySql实例(注解)
Spring AOP在Hibernate事务管理
Spring E-mail支持
Spring通过Gmail SMTP服务器MailSender发送电子邮件
Spring在bean配置文件中定义电子邮件模板
Spring发送带附件邮件
Spring依赖注入servlet会话监听器
Spring与其它Web框架集成
Spring Object到XML映射实例
 作者：回忆若风 Java技术QQ群：227270512 / Linux QQ群：479429477
Spring的Object/XML映射将对象转换到XML，或反之亦然。这个过程也被称为
XML Marshalling – 转换对象到XML
XML UnMarshalling – 转换XML到对象
在本教程中，我们将介绍如何使用 Spring 的 OXM 来做转换， Object <--- Spring oxm ---> XML.

注: 为什么使用 Spring的OXM 有好处？请阅读本 Spring 对象/XML映射的文章。
这里我们创建一个 Java 工程，整个工程的目录如下所示：

1. 一个简单对象
一个简单的对象，之后将其转换成 XML 文件。
package com.yiibai.core.model;

public class Customer {

	String name;
	int age;
	boolean flag;
	String address;

	//standard getter, setter and toString() methods.
}
3. Marshaller 和 Unmarshaller
这个类将处理通过 Spring 的 OXM 接口的转换： Marshaller 和 Unmarshaller.

package com.yiibai.core;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.Unmarshaller;

public class XMLConverter {

	private Marshaller marshaller;
	private Unmarshaller unmarshaller;

	public Marshaller getMarshaller() {
		return marshaller;
	}

	public void setMarshaller(Marshaller marshaller) {
		this.marshaller = marshaller;
	}

	public Unmarshaller getUnmarshaller() {
		return unmarshaller;
	}

	public void setUnmarshaller(Unmarshaller unmarshaller) {
		this.unmarshaller = unmarshaller;
	}

	public void convertFromObjectToXML(Object object, String filepath)
		throws IOException {

		FileOutputStream os = null;
		try {
			os = new FileOutputStream(filepath);
			getMarshaller().marshal(object, new StreamResult(os));
		} finally {
			if (os != null) {
				os.close();
			}
		}
	}

	public Object convertFromXMLToObject(String xmlfile) throws IOException {

		FileInputStream is = null;
		try {
			is = new FileInputStream(xmlfile);
			return getUnmarshaller().unmarshal(new StreamSource(is));
		} finally {
			if (is != null) {
				is.close();
			}
		}
	}

}
4. Spring配置
在 Spring 的 bean 配置文件，注入 CastorMarshaller 作为 XML 绑定框架。
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="XMLConverter" class="com.yiibai.core.XMLConverter">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
	</bean>
	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />

</beans>
5. 测试
运行它 

package com.yiibai.core;

import java.io.IOException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import com.yiibai.core.model.Customer;

public class App {
	private static final String XML_FILE_NAME = "customer.xml";
	
	public static void main(String[] args) throws IOException {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("App.xml");
		XMLConverter converter = (XMLConverter) appContext.getBean("XMLConverter");
		
		Customer customer = new Customer();
		customer.setName("yiibai");
		customer.setAge(28);
		customer.setFlag(true);
		customer.setAddress("Haikou haidiandao");
		
		System.out.println("Convert Object to XML!");
		//from object to XML file
		converter.convertFromObjectToXML(customer, XML_FILE_NAME);
		System.out.println("Done \n");
		
		System.out.println("Convert XML back to Object!");
		//from XML to object
		Customer customer2 = (Customer)converter.convertFromXMLToObject(XML_FILE_NAME);
		System.out.println(customer2);
		System.out.println("Done");
		
	}
}
输出结果

Convert Object to XML!
Done 

Convert XML back to Object!
Customer [name=yiibai, age=28, flag=true, address=Haikou Haidiandao]
Done
下面的 XML 文件“customer.xml”将在项目的根文件夹中生成。
File : customer.xml

<?xml version="1.0" encoding="UTF-8"?>
<customer flag="true" age="28">
	<address>Haikou Haidiandao</address>
	<name>yiibai</name>
</customer>
XML映射
等等，为什么flag和age可转换为属性？这是一种来控制哪些字段应为属性或元素的使用的方式？ 当然，您可以使用 Castor XML映射定义对象 和XML之间的关系。

创建以下映射文件，并把它放到你的项目的 classpath。
File : mapping.xml

<mapping>
	<class name="com.yiibai.core.model.Customer">

		<map-to xml="customer" />

		<field name="age" type="integer">
			<bind-xml name="age" node="attribute" />
		</field>

		<field name="flag" type="boolean">
			<bind-xml name="flag" node="element" />
		</field>

		<field name="name" type="string">
			<bind-xml name="name" node="element" />
		</field>

		<field name="address" type="string">
			<bind-xml name="address" node="element" />
		</field>
	</class>
</mapping>
在Spring bean配置文件，上述通过“mappingLocation”注入 mapping.xml 到 CastorMarshaller 。注：这里需要加入一个 org.springframework.oxm.***.jar 包，这个包函数在 MyEclipse 库的 Spring 3.0 Web Libaries中。
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="XMLConverter" class="com.yiibai.core.XMLConverter">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
	</bean>
	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" >
		<property name="mappingLocation" value="classpath:mapping.xml" />
	</bean>

</beans>
再次测试，XML文件“customer.xml”将被更新。
File : customer.xml

<?xml version="1.0" encoding="UTF-8"?>
<customer age="28">
	<flag>true</flag>
	<name>yiibai</name>
	<address>Haikou Haidiandao</address>
</customer>

参考：http://my.oschina.net/u/1455908/blog/311723

下载文档 – http://pan.baidu.com/s/1dEo0bnz

易百教程移动端：请扫描本页面底部(右侧)二维码并关注微信公众号，回复："教程" 选择相关教程阅读或直接访问：http://m.yiibai.com 。

上一篇：Spring AOP+AspectJ在XML配置实例下一篇：Spring+JDBC实例加QQ群啦，易百教程官方技术学习群 注意：建议每个人选自己的技术方向加群，同一个QQ最多限加3个群。
Java技术群： 227270512 （人数：2000，等级：LV5，免费：否）
MySQL/SQL群： 418407075 （人数：2000，等级：LV5，免费：否）
大数据开发群： 655154550 （人数：2000，等级：LV5，免费：否）
Python技术群： 287904175 （人数：2000，等级：LV5，免费：否）
人工智能深度学习： 456236082 （人数：2000，等级：LV5，免费：否）
测试工程师(新群)： 415553199 （人数：1000，等级：LV1，免费：是）
前端技术群(新群)： 410430016 （人数：1000，等级：LV1，免费：是）
C/C++技术(新群)： 629264796 （人数：1000，等级：LV1，免费：是）
Node.js技术(新群)： 621549808 （人数：1000，等级：LV1，免费：是）
PostgreSQL数据库（新群）： 539504187 （人数：1000，等级：LV1，免费：否）
Linux技术： 479429477 （人数：2000，等级：LV5，免费：否）
PHP开发者： 460153241 （人数：2000，等级：LV5，免费：是）
Oracle数据库： 175248146 （人数：2000，等级：LV5，免费：是）
C#/ASP.Net开发者： 579821706 （人数：2000，等级：LV5，免费：是）
数据分析师： 397883996 （人数：1000，等级：LV1，免费：是）R语言，Matlab语言等技术
推荐/最新教程
·GitLab教程
·Java国际化(i18n)教程
·SVG教程
·Kafka教程
·PDFBox教程
·java.util.zip包
·Apache Commons Collections教程
·Scipy教程
最新更新
·GitLab导入存储库
·GitLab恢复备份
·GitLab创建备份
·GitLab维基页面
·GitLab里程碑
·GitLab合并请求
·GitLab合并请求
·GitLab创建问题
站点信息
· 意见反馈
· 免责声明
· 关于我们
· 关于捐助
· 所有实例代码下载
易百教程官方QQ群
JAVA技术：227270512
MySQL数据库：418407075
Python技术： 287904175
大数据开发： 655154550
Linux技术： 479429477
PHP/Web技术： 460153241
关注微信公众号

Copyright © 2012-2018易百教程  yiiai.com All Rights Reserved. 备案号：琼ICP备13001417号-3 联系我们：769728683@qq.com